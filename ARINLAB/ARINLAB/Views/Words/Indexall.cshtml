@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@inject IHtmlLocalizer<SharedResource> SharedLocalizer
@inject ARINLAB.Services.SessionService.UserDictionary _userDict;
@using System.Globalization
@{
    ViewData["Title"] = SharedLocalizer["Words"];

}
@using ARINLAB.Areas.Admin.Utils
@using ARINLAB.Controllers
@model UserDictionaryModel;
<div class="flex justify-between flex-col xl:flex-row py-10 h-full xl:mb-0 blog">
    <div class="xl:w-8/12 xl:px-0 px-4 flex-grow">
        @if (CultureInfo.CurrentCulture.Name.StartsWith("ar"))
        {
            <h2 dir="rtl" class="md:text-4xl text-2xl font-semibold mb-10" style="font:900; padding-right:10%">@SharedLocalizer["Words Collection"] </h2>
        }
        else
        {
            <h2 class="md:text-4xl text-2xl font-semibold mb-10" style="font:900; padding-left:10%">@SharedLocalizer["Words Collection"] </h2>

        }
        <div class="row" style="padding-left: 10%; padding-right: 10%;">
            <div id="gridContainer">
            </div>
        </div>
    </div>
</div>


@section Scripts{

    <script>
        $(function () {
            let url = `@API.GetAllWordsWithDictId/@Model.DictionaryId`;
            var returnUrl = '@Context.Request.Path@Context.Request.QueryString';
            $("#gridContainer").dxDataGrid({
                dataSource: DevExpress.data.AspNet.createStore({
                    key: "id",
                    loadUrl: url,
                    insertUrl: url,
                    updateUrl: url,
                    deleteUrl: url,
                    onBeforeSend: function (method, ajaxOptions) {
                        ajaxOptions.xhrFields = { withCredentials: true };
                    }
                }),
                columnHidingEnabled: true,
                filterPanel: {
                    visible: false
                },
                filterRow: { visible: false },
                remoteOperations: true,
                onRowUpdating: function (e) {
                    e.newData = Object.assign(e.oldData, e.newData)
                },
                scrolling: {
                    mode: "virtual",
                    rowRenderingMode: "virtual"
                },
                paging: {
                    pageSize: 100
                },
                editing: {
                    useIcons: true,
                    allowUpdating: false,
                    allowDeleting: false,
                    allowAdding: false
                },
                headerFilter: {
                    visible: true
                },
                wordWrapEnabled: true,
                showColumnLines: false,
                showRowLines: true,
                rowAlternationEnabled: true,
                hoverStateEnabled: true,
                showBorders: true,
                searchPanel: {
                    visible: false
                },
                stateStoring: {
                    enabled:false,
                    type: "localStorage",
                    storageKey: "WordClauseAdmin"
                },
                 onCellClick: function (e) {
                     if (e.columnIndex == 0 || e.columnIndex == 2 || e.columnIndex == 3) {
                        var idString = e.data.id;
                        var url = `@Url.Action("Details", "Words", new { Area = "" })`;
                        window.location = url + '?id=' + idString;
                    }
                },
                columns: [
                    {
                        caption: '@SharedLocalizer["Arab Words"]',
                        dataField: "arabWord",
                        //width:300,
                        allowHeaderFiltering: false,
                        alignment: "center"
                    },
                    {
                        caption: ' ',
                        dataField: "arabVoice",
                        width: 110,
                        cellTemplate: function (element, options) {
                             if (options.value) {
                                 $('<div>', { class: 'cell' })
                                     .append($('<audio>', { id: options.value, })
                                         .append($('<source>', { src: '@(SD.HostName)' + options.value, type: 'audio/mpeg' })))
                                     .append($('<img>', {
                                         onclick: 'playAudio(\'' + options.value + '\')',
                                         style: 'padding-left: 10px; padding-right: 40px; cursor:pointer',
                                         src: '@(CultureInfo.CurrentCulture.Name.StartsWith("ar")? "/images/Icons/Voice_L.svg" : "/images/Icons/Voice_R.svg")',
                                    },))
                                    .appendTo(element);
                            } else {

                            }
                        },
                        allowHeaderFiltering: false,

                    },
                    {
                        caption: ' ',
                        width: 110,
                    },
                    {
                        caption: '@SharedLocalizer["Arabic Word in"] @Html.Raw(_userDict.GetDictionaryName())',
                        dataField: "otherWord",
                        //width: 300,
                        allowHeaderFiltering: false,
                        alignment: "center"
                    },
                    {
                        caption: ' ',
                        dataField: "otherVoice",
                        width: 110,
                        cellTemplate: function (element, options) {
                            if (options.value) {
                                $('<div>', { class: 'cell' })
                                    .append($('<audio>', { id: options.value, })
                                        .append($('<source>', { src: '@(SD.HostName)' + options.value, type: 'audio/mpeg' })))
                                    .append($('<img>', {
                                        onclick: 'playAudio(\'' + options.value + '\')',
                                        style: 'padding-left: 10px; padding-right: 40px; cursor:pointer',
                                        src: '@(CultureInfo.CurrentCulture.Name.StartsWith("ar")? "/images/Icons/Voice_L.svg" : "/images/Icons/Voice_R.svg")',
                                    }))
                                    .appendTo(element);
                            } else {

                            }
                        },
                        allowHeaderFiltering: false,

                    },
                    {
                        type: "buttons",
                        width: 55,
                        caption: '@SharedLocalizer["Share"]',
                        buttons: [
                            {
                                hint: '@SharedLocalizer["Share"]',
                                icon: "share",
                                onClick: function (e) {
                                    var req = new XMLHttpRequest();
                                    req.open("GET", "/api/ExportAPI/" + e.row.data.arabWord+"/" + e.row.data.otherWord, false);
                                    req.send();
                                    var a = document.createElement("a");
                                    a.setAttribute("href", ""+req.responseText);
                                    a.setAttribute("download", "" + req.responseText);
                                    document.body.appendChild(a);
                                    a.click();
                                    document.body.removeChild(a);
                                }
                            },
                        ]
                    }
                ]
            });
        });

        function playAudio(id) {
            var x = document.getElementById(id);
            x.play();
        }

        function pauseAudio(id) {
            var x = document.getElementById(id);
            x.pause();
        }
    </script>

}
